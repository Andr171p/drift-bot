import logging

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message

from dishka.integrations.aiogram import FromDishka as Depends

from ...decorators import role_required
from ...enums import AdminChampionshipAction
from ...callbacks import AdminChampionshipActionCallback
from ...keyboards import admin_championship_actions_kb

from src.drift_bot.core.enums import Role, FileType
from src.drift_bot.core.domain import Championship
from src.drift_bot.core.services import CRUDService
from src.drift_bot.core.base import ChampionshipRepository
from src.drift_bot.core.exceptions import DeletionError, RemovingFileError, UpdateError

from src.drift_bot.templates import CHAMPIONSHIP_TEMPLATE

logger = logging.getLogger(name=__name__)

championship_admin_actions_router = Router(name=__name__)

ADMIN_REQUIRED_MESSAGE = "‚õî –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á–µ–º–ø–∏–æ–Ω–∞—Ç –∏ –¥–æ–±–∞–≤–ª—è—Ç—å —ç—Ç–∞–ø—ã –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"


@championship_admin_actions_router.message(Command("my_championships"))
@role_required(Role.ADMIN, error_message="")
async def send_my_championships(
        message: Message,
        championship_repository: Depends[ChampionshipRepository],
        championship_crud_service: Depends[CRUDService[Championship]]
) -> None:
    my_championships = await championship_repository.get_by_user_id(message.from_user.id)
    if not my_championships:
        await message.answer("""–í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–∏–Ω —á–µ–º–ø–∏–æ–Ω–∞—Ç, 
            –≤—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_championship
        """)
    else:
        for my_championship in my_championships:
            championship, files = await championship_crud_service.read(my_championship.id)
            photo = next((file for file in files if file.type == FileType.PHOTO), None)
            keyboard = admin_championship_actions_kb(id=championship.id, is_active=championship.is_active)
            text = CHAMPIONSHIP_TEMPLATE.format(
                title=championship.title,
                description=championship.description,
                stages_count=championship.stages_count
            )
            if photo:
                await message.answer_photo(photo=photo, caption=text, reply_markup=keyboard)
            else:
                await message.answer(text=text, reply_markup=keyboard)


@championship_admin_actions_router.callback_query(
    AdminChampionshipActionCallback.filter(F.action == AdminChampionshipAction.DELETE)
)
@role_required(Role.ADMIN, error_message=ADMIN_REQUIRED_MESSAGE)
async def delete_championship(
        call: CallbackQuery,
        callback_data: AdminChampionshipActionCallback,
        championship_crud_service: Depends[CRUDService[Championship]]
) -> None:
    try:
        is_deleted = await championship_crud_service.delete(callback_data.id)
        if is_deleted:
            logger.info(f"Championship {callback_data.id} deleted successfully.")
            await call.message.answer("‚úÖ –ß–µ–º–ø–∏–æ–Ω–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω...")
        else:
            await call.message.answer("‚ùå –ß–µ–º–ø–∏–æ–Ω–∞—Ç –Ω–µ –±—ã–ª —É–¥–∞–ª—ë–Ω...")
    except (DeletionError, RemovingFileError) as e:
        logger.error(f"Error occurred: {e}")
        await call.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞!")
    except Exception as e:
        logger.error(f"Error occurred: {e}")
        await call.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è...")


@championship_admin_actions_router.callback_query(
    AdminChampionshipActionCallback.filter(F.action == AdminChampionshipAction.TOGGLE_ACTIVATION)
)
@role_required(Role.ADMIN, error_message=ADMIN_REQUIRED_MESSAGE)
async def toggle_championship_activation(
        call: CallbackQuery,
        callback_data: AdminChampionshipActionCallback,
        championship_repository: Depends[ChampionshipRepository]
) -> None:
    championship = await championship_repository.read(callback_data.id)
    is_active = True if not championship.is_active else False
    try:
        await championship.update(callback_data.id, is_active=is_active)
        text = "üü¢ –ß–µ–º–ø–∏–æ–Ω–∞—Ç –æ—Ç–∫—Ä—ã—Ç" if is_active else "üî¥ –ß–µ–º–ø–∏–æ–Ω–∞—Ç –∑–∞–∫—Ä—ã—Ç"
        await call.message.answer(text)
    except UpdateError as e:
        logger.error(f"Error occurred: {e}")
        await call.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞!")
    except Exception as e:
        logger.error(f"Error occurred: {e}")
        await call.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è...")
