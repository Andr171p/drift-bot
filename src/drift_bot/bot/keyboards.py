from typing import Union

from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from pydantic import PositiveInt

from .enums import (
    Confirmation,
    AdminChampionshipAction,
    AdminStageAction,
    ChampionshipAction,
    JudgeStageAction,
    PilotStageAction
)
from .callbacks import (
    StartCallback,
    CriterionChoiceCallback,
    AdminChampionshipActionCallback,
    AdminStageActionCallback,
    ChampionshipCallback,
    ChampionshipPageCallback,
    ChampionshipActionCallback,
    ConfirmChampionshipCreationCallback,
    ConfirmJudgeRegistrationCallback,
    ConfirmStageDeletionCallback,
    ConfirmStageCreationCallback,
    JudgeStageActionCallback,
    PilotStageActionCallback
)

from ..core.enums import Role
from ..core.domain import Championship
from ..constants import CRITERION2TEXT

ConfirmCallback = Union[
    ConfirmChampionshipCreationCallback,
    ConfirmJudgeRegistrationCallback,
    ConfirmStageCreationCallback,
    ConfirmStageDeletionCallback,
]


def start_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üèéÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫", callback_data=StartCallback(role=Role.PILOT).pack())
    builder.button(text="‚öñÔ∏è –°—É–¥—å—è", callback_data=StartCallback(role=Role.JUDGE).pack())
    builder.button(text="üìãüë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data=StartCallback(role=Role.ADMIN).pack())
    builder.adjust(1)
    return builder.as_markup()


def confirm_kb(callback: type[ConfirmCallback]) -> InlineKeyboardMarkup:
    """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞.
         - `–î–∞` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
         - `–Ω–µ—Ç` –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è
    """
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–î–∞ ‚úÖ",
        callback_data=callback(confirmation=Confirmation.YES).pack()
    )
    builder.button(
        text="–ù–µ—Ç ‚ùå",
        callback_data=callback(confirmation=Confirmation.NO).pack()
    )
    return builder.as_markup()


def admin_championship_actions_kb(championship_id: int, is_active: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–º."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        callback_data=AdminChampionshipActionCallback(
            id=championship_id,
            action=AdminChampionshipAction.DELETE
        ).pack()
    )
    builder.button(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø",
        callback_data=AdminChampionshipActionCallback(
            id=championship_id,
            action=AdminChampionshipAction.ADD_STAGE
        ).pack()
    )
    builder.button(
        text="üü¢ –°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º" if not is_active else "üî¥ –ó–∞–∫—Ä—ã—Ç—å",
        callback_data=AdminChampionshipActionCallback(
            id=championship_id,
            action=AdminChampionshipAction.TOGGLE_ACTIVATION
        ).pack()
    )
    builder.adjust(1)
    return builder.as_markup()


def admin_stage_actions_kb(stage_id: int, is_active: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∞–ø–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        callback_data=AdminStageActionCallback(
            id=stage_id,
            action=AdminStageAction.DELETE
        ).pack()
    )
    builder.button(
        text="üîì –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é" if not is_active else "üîê –ó–∞–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
        callback_data=AdminStageActionCallback(
            id=stage_id,
            action=AdminStageAction.TOGGLE_REGISTRATION
        ).pack()
    )
    builder.button(
        text="üì® –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å—É–¥—å—é",
        callback_data=AdminStageActionCallback(
            id=stage_id,
            action=AdminStageAction.INVITE_JUDGE
        ).pack()
    )
    builder.adjust(1)
    return builder.as_markup()


def choose_criterion_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–¥–µ–π—Å–∫–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è."""
    builder = InlineKeyboardBuilder()
    for criterion in CRITERION2TEXT.keys():
        builder.button(
            text=CRITERION2TEXT[criterion],
            callback_data=CriterionChoiceCallback(criterion=criterion).pack()
        )
    return builder.as_markup()


def numeric_kb(numbers: int) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–∏—Ñ—Ä."""
    builder = ReplyKeyboardBuilder()
    for number in range(1, numbers + 1):
        builder.button(text=str(number))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


def judge_registration_kb(stage_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—É–¥—å–∏ –Ω–∞ —ç—Ç–∞–ø."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        callback_data=JudgeStageActionCallback(
            id=stage_id,
            action=JudgeStageAction.REGISTRATION
        ).pack()
    )
    return builder.as_markup()


def paginate_championships_kb(
        page: PositiveInt,
        total: PositiveInt,
        championships: list[Championship]
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤."""
    builder = InlineKeyboardBuilder()
    for championship in championships:
        builder.button(
            text=f"{championship.title}",
            callback_data=ChampionshipCallback(id=championship.id).pack()
        )
    buttons: list[InlineKeyboardButton] = []
    if page > 1:
        previous_page = page - 1
        buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=ChampionshipPageCallback(page=previous_page).pack()
        ))
    if page < total:
        next_page = page + 1
        buttons.append(InlineKeyboardButton(
            text="‚û°Ô∏è",
            callback_data=ChampionshipPageCallback(page=next_page).pack()
        ))
    builder.row(*buttons)
    builder.adjust(1)
    return builder.as_markup()


def championship_actions_kb(championship_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–º."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤",
        callback_data=ChampionshipActionCallback(
            id=championship_id,
            action=ChampionshipAction.STAGES_SCHEDULE).pack()
    )
    builder.button(
        text="üîú –ë–ª–∏–∂–∞–π—à–∏–π —ç—Ç–∞–ø",
        callback_data=ChampionshipActionCallback(
            id=championship_id,
            action=ChampionshipAction.NEAREST_STAGE).pack()
    )
    builder.button(
        text="üìÑ –û–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º",
        callback_data=ChampionshipActionCallback(
            id=championship_id,
            action=ChampionshipAction.READ_REGULATIONS).pack()
    )
    builder.adjust(1)
    return builder.as_markup()


def judge_stage_actions_kb(stage_id: int, is_registered: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å—É–¥—å–∏ —Å —ç—Ç–∞–ø–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        callback_data=JudgeStageActionCallback(
            id=stage_id,
            action=JudgeStageAction.REGISTRATION
        ).pack()
    )
    builder.adjust(1)
    return builder.as_markup()


def pilot_stage_actions_kb(stage_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–∏–ª–æ—Ç–∞ —Å —ç—Ç–∞–ø–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
        callback_data=PilotStageActionCallback(
            id=stage_id,
            action=PilotStageAction.REGISTRATION
        )
    )
    builder.adjust(1)
    return builder.as_markup()
