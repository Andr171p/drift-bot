from typing import Optional, Union

from datetime import datetime, timedelta

from aiogram.types import InlineKeyboardMarkup, ReplyKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

from pydantic import PositiveInt

from .enums import (
    Confirmation,
    AdminChampionshipAction,
    AdminStageAction,
    ChampionshipAction,
    CalendarAction
)
from .callbacks import (
    StartCallback,
    CriterionChoiceCallback,
    AdminChampionshipActionCallback,
    AdminStageActionCallback,
    JudgeRegistrationCallback,
    ChampionshipCallback,
    ChampionshipPageCallback,
    ChampionshipActionCallback,
    CalendarActionCallback,
    ConfirmChampionshipCreationCallback,
    ConfirmJudgeRegistrationCallback,
    ConfirmStageDeletionCallback,
    ConfirmStageCreationCallback
)

from ..core.enums import Role
from ..core.domain import Championship
from ..constants import CRITERION2TEXT, MONTH_NAMES, WEEKDAY_NAMES

WEEK_LENGTH = 7  # –î–ª–∏–Ω–∞ –Ω–µ–¥–µ–ª–∏
MONTHS = 12      # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –≤ –≥–æ–¥—É

ConfirmCallback = Union[
    ConfirmChampionshipCreationCallback,
    ConfirmJudgeRegistrationCallback,
    ConfirmStageCreationCallback,
    ConfirmStageDeletionCallback,
]


def start_keyboard() -> InlineKeyboardMarkup:
    """–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏."""
    builder = InlineKeyboardBuilder()
    builder.button(text="üèéÔ∏è –£—á–∞—Å—Ç–Ω–∏–∫", callback_data=StartCallback(role=Role.PILOT).pack())
    builder.button(text="‚öñÔ∏è –°—É–¥—å—è", callback_data=StartCallback(role=Role.JUDGE).pack())
    builder.button(text="üìãüë®‚Äçüíº –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data=StartCallback(role=Role.ADMIN).pack())
    builder.adjust(1)
    return builder.as_markup()


def confirm_kb(callback: type[ConfirmCallback]) -> InlineKeyboardMarkup:
    """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞.
         - `–î–∞` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
         - `–Ω–µ—Ç` –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–æ–∑–¥–∞–Ω–∏—è
    """
    builder = InlineKeyboardBuilder()
    builder.button(
        text="–î–∞ ‚úÖ",
        callback_data=callback(confirmation=Confirmation.YES).pack()
    )
    builder.button(
        text="–ù–µ—Ç ‚ùå",
        callback_data=callback(confirmation=Confirmation.NO).pack()
    )
    return builder.as_markup()


def admin_championship_actions_kb(id: int, is_active: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–º."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        callback_data=AdminChampionshipActionCallback(
            id=id,
            action=AdminChampionshipAction.DELETE
        ).pack()
    )
    builder.button(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —ç—Ç–∞–ø",
        callback_data=AdminChampionshipActionCallback(
            id=id,
            action=AdminChampionshipAction.ADD_STAGE
        ).pack()
    )
    builder.button(
        text="üü¢ –°–¥–µ–ª–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º" if not is_active else "üî¥ –ó–∞–∫—Ä—ã—Ç—å",
        callback_data=AdminChampionshipActionCallback(
            id=id,
            action=AdminChampionshipAction.TOGGLE_ACTIVATION
        ).pack()
    )
    builder.adjust(1)
    return builder.as_markup()


def admin_stage_actions_kb(id: int, is_active: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —ç—Ç–∞–ø–æ–º —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        callback_data=AdminStageActionCallback(
            id=id,
            action=AdminStageAction.DELETE
        ).pack()
    )
    builder.button(
        text="üîì –û—Ç–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é" if not is_active else "üîê –ó–∞–∫—Ä—ã—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
        callback_data=AdminStageActionCallback(
            id=id,
            action=AdminStageAction.TOGGLE_REGISTRATION
        ).pack()
    )
    builder.button(
        text="üì® –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å—É–¥—å—é",
        callback_data=AdminStageActionCallback(
            id=id,
            action=AdminStageAction.INVITE_JUDGE
        ).pack()
    )
    builder.adjust(1)
    return builder.as_markup()


def choose_criterion_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–¥–µ–π—Å–∫–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä–∏—è."""
    builder = InlineKeyboardBuilder()
    for criterion in CRITERION2TEXT.keys():
        builder.button(
            text=CRITERION2TEXT[criterion],
            callback_data=CriterionChoiceCallback(criterion=criterion).pack()
        )
    return builder.as_markup()


def numeric_kb(numbers: int) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Ü–∏—Ñ—Ä."""
    builder = ReplyKeyboardBuilder()
    for number in range(1, numbers + 1):
        builder.button(text=str(number))
    return builder.as_markup(resize_keyboard=True, one_time_keyboard=True)


def judge_registration_kb(stage_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—É–¥—å–∏ –Ω–∞ —ç—Ç–∞–ø."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üìù –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é",
        callback_data=JudgeRegistrationCallback(stage_id=stage_id).pack()
    )
    return builder.as_markup()


def paginate_championships_kb(
        page: PositiveInt,
        total: PositiveInt,
        championships: list[Championship]
) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–≤."""
    builder = InlineKeyboardBuilder()
    for championship in championships:
        builder.button(
            text=f"{championship.title}",
            callback_data=ChampionshipCallback(id=championship.id).pack()
        )
    if page > 1:
        previous_page = page - 1
        builder.button(text="‚¨ÖÔ∏è", callback_data=ChampionshipPageCallback(page=previous_page).pack())
    if page < total:
        next_page = page + 1
        builder.button(text="‚û°Ô∏è", callback_data=ChampionshipPageCallback(page=next_page).pack())
    builder.adjust(1)
    return builder.as_markup()


def championship_actions_kb(id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —á–µ–º–ø–∏–æ–Ω–∞—Ç–æ–º."""
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —ç—Ç–∞–ø–æ–≤",
        callback_data=ChampionshipActionCallback(id=id, action=ChampionshipAction.STAGES_SCHEDULE).pack()
    )
    builder.button(
        text="üîú –ë–ª–∏–∂–∞–π—à–∏–π —ç—Ç–∞–ø",
        callback_data=ChampionshipActionCallback(id=id, action=ChampionshipAction.NEAREST_STAGE).pack()
    )
    builder.button(
        text="üìÑ –û–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–æ–º",
        callback_data=ChampionshipActionCallback(id=id, action=ChampionshipAction.READ_REGULATIONS).pack()
    )
    builder.adjust(1)
    return builder.as_markup()


class CalendarKeyboard:
    def __init__(
            self,
            current_date: Optional[datetime] = None,
            marked_dates: Optional[list[datetime]] = None,
            mark_label: Optional[str] = None,
    ) -> None:
        """
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è.

            :param current_date: –î–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—É—â–∞—è)
            :param marked_dates: –°–ø–∏—Å–æ–∫ –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞—Ç
            :param mark_label: –ú–µ—Ç–∫–∞ –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω–Ω—ã—Ö –¥–∞—Ç
        """
        self.current_date = current_date or datetime.now()
        self.marked_dates = marked_dates or []
        self.mark_label = mark_label or "‚úÖ"

    @property
    def _month_names(self) -> list[str]:
        return MONTH_NAMES

    @property
    def _weekday_names(self) -> list[str]:
        return WEEKDAY_NAMES

    @staticmethod
    def _get_month_days(year: int, month: int) -> list[list[...]]:
        """–°–æ–∑–¥–∞—ë—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—É—é —Å–µ—Ç–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞."""
        first_day = datetime(year=year, month=month, day=1)
        last_day = (
            datetime(year=year, month=month + 1, day=1) - timedelta(days=1)
            if month < MONTHS
            else datetime(year=year + 1, month=1, day=1) - timedelta(days=1)
        )
        first_weekday = first_day.weekday()
        # last_weekday = last_day.weekday()

        weeks: list[Optional[int]] = []
        current_week = [None] * first_weekday

        for day in range(1, last_day.day + 1):
            current_week.append(day)
            if len(current_week) == WEEK_LENGTH:
                weeks.append(current_week)
                current_week = []

        if current_week:
            current_week += [None] * (WEEK_LENGTH - len(current_week))
            weeks.append(current_week)
        return weeks

    def _id_date_marked(self, date: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–º–µ—á–µ–Ω–∞ –ª–∏ –¥–∞—Ç–∞."""
        return any(date.date() == marked_date for marked_date in self.marked_dates)

    def _get_day_button(self, day: Optional[int], month: int, year: int) -> InlineKeyboardButton:
        """
            –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –¥–Ω—è —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ—Ç–º–µ—Ç–∫–æ–π.

            :param day: –ß–∏—Å–ª–æ –¥–Ω—è –∏–ª–∏ None
            :param month: –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            :param year: –¢–µ–∫—É—â–∏–π –≥–æ–¥
            :return: –û–±—ä–µ–∫—Ç InlineKeyboardButton
        """
        if day is None:
            return InlineKeyboardButton(
                text="",
                callback_data=CalendarActionCallback(action=CalendarAction.IGNORE).pack()
            )
        date = datetime(year=year, month=month, day=day)
        is_marked = self._id_date_marked(date)
        label = self.mark_label if is_marked else ""
        return InlineKeyboardButton(
            text=f"{label}{day}{label}",
            callback_data=CalendarActionCallback(
                action=CalendarAction.DAY,
                year=year,
                month=month,
                day=day
            ).pack()
        )

    def __call__(self) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è."""
        builder = InlineKeyboardBuilder()
        year, month = self.current_date.year, self.current_date.month
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
        month_name = self._month_names[month - 1]
        builder.row(InlineKeyboardButton(
            text=f"{month_name} {year}",
            callback_data=CalendarActionCallback(action=CalendarAction.IGNORE).pack()
        ))
        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
        builder.row(*[
            InlineKeyboardButton(
                text=day,
                callback_data=CalendarActionCallback(action=CalendarAction.IGNORE).pack()
            ) for day in self._weekday_names
        ])
        # –î–Ω–∏ –º–µ—Å—è—Ü–∞
        weeks = self._get_month_days(year, month)
        for week in weeks:
            builder.row(*[self._get_day_button(day, month, year) for day in week])

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        previous_month = month - 1 if month > 1 else MONTHS
        previous_year = year if month > 1 else year - 1
        next_month = month + 1 if month < MONTHS else 1
        next_year = year if month < MONTHS else year + 1

        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=CalendarActionCallback(
                    action=CalendarAction.PREVIOUS, year=previous_year, month=previous_month
                ).pack()
            ),
            InlineKeyboardButton(
                text="–°–µ–≥–æ–¥–Ω—è",
                callback_data=CalendarActionCallback(
                    action=CalendarAction.TODAY, year=datetime.now().year, month=datetime.now().month
                ).pack()
            ),
            InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=CalendarActionCallback(
                    action=CalendarAction.NEXT, year=next_year, month=next_month
                ).pack()
            )
        )
        return builder.as_markup()
